/**
 * Event Search controller
 * 
 */
function EventSearchCtrl($scope, apiService, apiUrl, $anchorScroll, $location,
		$localStorage, $modal, notify, $http, SweetAlert, userDataService) {

	var _this = this;

	this.searchArgs = $localStorage.searchFilterArgs || {};

	this.selected = {};

	this.username = userDataService.getUserName();

	this.filtername = "";

	this.totalFilterCount = 0;

	this.defaultLimit = 5;

	this.viewAllFilter = false;

	this.dtSavedFilterOpt = {
		paging : false,
		searching : false,
		info : false,
		ordering : false
	};

	this.dtSavedFilterAllOpt = {
		ordering : false
	};

	this.savedFilterLoading = false;
	
	/*
	 * Initialize
	 */

	this.init = function() {

		_this.selected['sessionId'] = 
			(_this.searchArgs['sessionId'] !== undefined && _this.searchArgs['sessionId'].length > 0) 
			 ? JSON.parse(_this.searchArgs['sessionId']) : [];
		_this.selected['serverId'] = 
			(_this.searchArgs['serverId'] !== undefined && _this.searchArgs['serverId'].length > 0)
			 ? JSON.parse(_this.searchArgs['serverId'])	: [];
		_this.selected['source'] = 
			(_this.searchArgs['source'] !== undefined && _this.searchArgs['source'].length > 0)
			 ? JSON.parse(_this.searchArgs['source'])	: [];
		_this.selected['version'] = 
			(_this.searchArgs['version'] !== undefined && _this.searchArgs['version'].length > 0)
			? JSON.parse(_this.searchArgs['version'])	: [];		
		_this.selected['userId'] = 
			(_this.searchArgs['userId'] !== undefined && _this.searchArgs['userId'].length > 0)
			 ? JSON.parse(_this.searchArgs['userId'])	: [];

		_this.fromDate = (_this.searchArgs['fromDate'] != undefined ? _this.searchArgs['fromDate']
				: new Date());

		_this.toDate = (_this.searchArgs['toDate'] != undefined ? _this.searchArgs['toDate']
				: new Date());

		_this.filtername = "";

		_this.getSources();
		_this.getVersions();
		_this.getDomains();
		_this.getServers();
		_this.getSessions();
		_this.getSavedFilters();

	}

	/*
	 * To clear search filter
	 */

	this.clearSearchFilter = function() {

		_this.searchArgs = {};
		_this.init();
		$scope.$emit('populateSearch', _this.searchArgs);
	};

	/*
	 * To save search filter
	 */

	this.saveSearchFilter = function(args) {

		var args = {};

		args['source'] = (_this.selected['source'].length > 0) ? _this.selected['source']
				: ["all"];
		args['version'] = 
			      (_this.selected['version'].length > 0) ? _this.selected['version']
				: (_this.selected.source.indexOf('studio') > -1) ? ["all"] 
			    : [];
		args['userId'] = (_this.selected['userId'].length > 0) ? _this.selected['userId']
				: ["all"];
		args['serverId'] = (_this.selected['serverId'].length > 0) ? _this.selected['serverId']
				: ["all"];
		args['sessionId'] = (_this.selected['sessionId'].length > 0) ? _this.selected['sessionId']
				: ["all"];
		args['fromDate'] = new Date(_this.fromDate).getTime();
		args['toDate'] = new Date(_this.toDate).getTime();
		args['uName'] = _this.username;
		args['filtername'] = _this.filtername || "filtername"
				+ (_this.totalFilterCount + 1);

		apiService.post(apiUrl.SAVE_SEARCH_FILTER, args,
				function(data, status) {
					if (data.status == "Failed") {
						notify({
							message : 'Error :- ' + data.message,
							classes : 'alert-danger',
							templateUrl : 'views/common/notify.html'
						});

					} else {
						notify({
							message : 'Success :- ' + data.message,
							classes : 'alert-success',
							templateUrl : 'views/common/notify.html'
						});
						_this.getSavedFilters();
					}
					_this.filtername = "";

				});

	}

	/*
	 * To get saved search filter list
	 */

	this.getSavedFilters = function() {
		var args = {};
		args['uName'] = _this.username;
		args['limit'] = (_this.viewAllFilter) ? -1 : _this.defaultLimit;
		_this.savedFilterLoading = true;
		apiService.getWithParams(apiUrl.GET_SAVED_FILTERS, args, function(data,
				status) {

			setTimeout(function() {
				 for (var i = 0; i < data.result.length; i++){
					 data.result[i].source = JSON.parse(data.result[i].source);
					 data.result[i].version = JSON.parse(data.result[i].version);
					 data.result[i].sessionId = JSON.parse(data.result[i].sessionId);
					 data.result[i].serverId = JSON.parse(data.result[i].serverId);
					 data.result[i].userId = JSON.parse(data.result[i].userId);
				 }
				_this.savedFilterList = data.result;
				_this.totalFilterCount = data.totalFilterCount;
				_this.savedFilterLoading = false;
				if (!$scope.$$phase)
					$scope.$apply();
			}, 10);

		});

	}

	/*
	 * To set search filter
	 */

	this.setSearchFilter = function(filter) {

		var args = {};

		_this.selected['sessionId'] = (filter['sessionId'][0] != "all") ? filter['sessionId']
				: [];
		_this.selected['serverId'] = (filter['serverId'][0] != "all") ? filter['serverId']
				: [];
		_this.selected['source'] = (filter['source'][0] != "all") ? filter['source']
				: [];
		_this.selected['version'] = 
				  (filter['version'].length > 0 && filter['version'][0] != "all") 
				? filter['version']
				: [];		
		_this.selected['userId'] = (filter['userId'][0] != "all") ? filter['userId']
				: [];

		_this.filtername = filter['filtername'];

		_this.fromDate = new Date(parseInt(filter['fromDate']));
		_this.toDate = new Date(parseInt(filter['toDate']));

		angular.copy(_this.selected, args);
		if (filter['fromDate'] != filter['toDate']
				&& filter['fromDate'] < filter['toDate']) {
			args['fromDate'] = filter['fromDate'];
		}
		if (filter['toDate'] != filter['fromDate']
				&& filter['toDate'] > filter['fromDate']) {
			args['toDate'] = filter['toDate'];
		}

		$scope.$emit('populateSearch', args);

	}

	/*
	 * To delete all saved filter
	 */

	this.deleteAllFilter = function() {

		SweetAlert.swal({
			title : "Are you sure?",
			text : "Your will not be able to recover the list",
			type : "warning",
			showCancelButton : true,
			confirmButtonColor : "#DD6B55",
			confirmButtonText : "Delete All",
			closeOnConfirm : true
		}, function(isConfirm) {
			if (isConfirm) {
				var args = {};
				args['uName'] = _this.username;
				apiService.getWithParams(apiUrl.DELETE_ALL_FILTERS, args,
						function(data, status) {
							if (data.status == "Failed") {
								notify({
									message : 'Error :- ' + data.message,
									classes : 'alert-danger',
									templateUrl : 'views/common/notify.html'
								});
							} else {
								notify({
									message : 'Success :- ' + data.message,
									classes : 'alert-success',
									templateUrl : 'views/common/notify.html'
								});
								_this.getSavedFilters();
							}
							_this.filtername = "";

						});
			}
		});
	}

	/*
	 * To delete search filter
	 */

	this.deleteFilterRecord = function(id) {
		if (id) {
			var args = {};
			id = id.replace('#', '');
			args['rid'] = id;
			apiService.getWithParams(apiUrl.DELETE_RECORD, args, function(data,
					status) {
				if (data.status == "Failed") {
					notify({
						message : 'Error :- ' + data.message,
						classes : 'alert-danger',
						templateUrl : 'views/common/notify.html'
					});

				} else {
					notify({
						message : 'Success :- ' + data.message,
						classes : 'alert-success',
						templateUrl : 'views/common/notify.html'
					});
					_this.getSavedFilters();
				}
				_this.filtername = "";

			});
		}
	}

	/*
	 * Get all Session Ids
	 */

	this.getSessions = function() {
		var args = {};
		args['source'] = _this.selected['source'];
		args['version'] = _this.selected['version'];
		args['userId'] = _this.selected['userId'];
		args['serverId'] = _this.selected['serverId'];
		apiService
				.getWithParams(
						apiUrl.GET_SESSIONS,
						args,
						function(data, status) {
							_this.eventSessionList = data.names;
							// Check the selected values are available in updated list
							// if true, keep the element. else, remove it from selected list.
							if (_this.selected['sessionId'].length > 0 &&									
									!(_this.selected['sessionId'].every(function(element, index) {
										return (data.names.indexOf(element) > -1);
									}))) {
								_this.searchArgs['sessionId'] = _this.selected['sessionId'] = $
										.arrayIntersect(data.names,
												_this.selected['sessionId']);
								$scope
										.$emit('populateSearch',
												_this.searchArgs);
							}

						});
	}

	this.hasSessionChanged = function() {

		_this.searchArgs['sessionId'] = _this.selected['sessionId'];
		$scope.$emit('populateSearch', _this.searchArgs);

	}

	/*
	 * Get all Server Ids
	 */

	this.getServers = function() {
		var args = {};
		args['source'] = _this.selected['source'];
		args['version'] = _this.selected['version'];
		apiService
				.getWithParams(
						apiUrl.GET_SERVERS,
						args,
						function(data, status) {
							_this.eventServerList = data.names;
							// Check the selected values are available in updated list
							// if true, keep the element. else, remove it from selected list.
							if (_this.selected['serverId'].length > 0 &&									
									!(_this.selected['serverId'].every(function(element, index) {
										return (data.names.indexOf(element) > -1);
									}))) {
								_this.searchArgs['serverId'] = _this.selected['serverId'] = $
										.arrayIntersect(data.names,
												_this.selected['serverId']);
								$scope
										.$emit('populateSearch',
												_this.searchArgs);
							}
						});
	}

	this.hasServerChanged = function() {

		_this.getDomains();
		_this.getSessions();
		_this.searchArgs['serverId'] = _this.selected['serverId'];
		$scope.$emit('populateSearch', _this.searchArgs);

	}

	/*
	 * Get all Domain/User Ids
	 */

	this.getDomains = function() {
		var args = {};
		args['source'] = _this.selected['source'];
		args['version'] = _this.selected['version'];
		args['serverId'] = _this.selected['serverId'];
		apiService.getWithParams(apiUrl.GET_DOMAINS, args, function(data,
				status) {
			_this.eventDomainList = data.names;
			// Check the selected values are available in updated list
			// if true, keep the element. else, remove it from selected list.
			if (_this.selected['userId'].length > 0 &&									
					!(_this.selected['userId'].every(function(element, index) {
						return (data.names.indexOf(element) > -1);
					}))) {
				_this.searchArgs['userId'] = _this.selected['userId'] = $
						.arrayIntersect(data.names,
								_this.selected['userId']);
				$scope
						.$emit('populateSearch',
								_this.searchArgs);
			}
			

		});
	}

	this.hasDomainChanged = function() {
		
		_this.getSessions();
		_this.searchArgs['userId'] = _this.selected['userId'];
		$scope.$emit('populateSearch', _this.searchArgs);

	}

	/*
	 * Get all Domain Ids
	 */

	this.getSources = function() {

		apiService.getWithParams(apiUrl.GET_SOURCES, {},
				function(data, status) {
					_this.eventSourceList = data.names;
				});
	}

	this.hasSourceChanged = function() {

		_this.getServers();
		_this.getDomains();
		_this.getSessions();
		_this.searchArgs['source'] = _this.selected['source'];
		if(_this.selected.source.indexOf('studio') == -1)
			_this.searchArgs['version'] = _this.selected['version'] = [];
		$scope.$emit('populateSearch', _this.searchArgs);
	}

	/*
	 * Get all Studio(source) versions
	 */

	this.getVersions = function() {
		apiService.getWithParams(apiUrl.GET_VERSIONS, {},
				function(data, status) {
					_this.eventVersionList = data.names;
				});
	}

	this.hasVersionChanged = function() {

		_this.getServers();
		_this.getDomains();
		_this.getSessions();
		_this.searchArgs['version'] = _this.selected['version'];
		$scope.$emit('populateSearch', _this.searchArgs);
	}
	
	this.hasFromDateChanged = function() {

		if ((_this.searchArgs['fromDate'] == undefined)
				|| _this.searchArgs['fromDate'] != new Date(_this.fromDate)
						.getTime()) {
			_this.searchArgs['fromDate'] = new Date(_this.fromDate).getTime();
			$scope.$emit('populateSearch', _this.searchArgs);
		}

	}

	this.hasToDateChanged = function() {

		if ((_this.searchArgs['toDate'] == undefined)
				|| _this.searchArgs['toDate'] != new Date(_this.toDate)
						.getTime()) {
			_this.searchArgs['toDate'] = new Date(_this.toDate).getTime();
			$scope.$emit('populateSearch', _this.searchArgs);
		}

	}

	this.init();

}

/**
 * 
 * Pass all functions into module
 */
angular.module('cie').controller('EventSearchCtrl', EventSearchCtrl)
