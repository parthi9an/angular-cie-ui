/**
 * Tool Event Controller
 */

function ToolEventCtrl(conf, apiUrl, apiService, $scope, $http, $anchorScroll,
		$location, $localStorage, $modal, $compile) {

	var _this = this;
	
	this.loading = false;

	this.init = function() {

		var args = ($localStorage.searchFilterArgs != undefined) ? $localStorage.searchFilterArgs
				: {};
		
		this.getOverAllSummary();
		this.getAllEvent(args);
		this.getFrequentEventPattern(args);

	}

	/*
	 * Search filter (in progress)
	 */
	$scope.$on('populateSearchResults', function(event, args) {

		$localStorage.searchFilterArgs = args;
		_this.getAllEvent(args);
		_this.getFrequentEventPattern(args);
		
	});

	/*
	 * Returns the count of event
	 */

	this.getCount = function(key) {
		return (this.summaryData == null || this.summaryData[key] == undefined) ? 0
				: this.summaryData[key].count;
	}

	/*
	 * Get overall summary of Events(count)
	 */

	this.getOverAllSummary = function() {
		apiService.get(apiUrl.GET_OVERALL_SUMMMARY, function(data, status) {
			_this.summaryData = data;
		});
	}

	/*
	 * Get all the events
	 */

	this.getAllEvent = function(searchArgs) {
		_this.loading = true;
		var args = {};
		angular.copy(searchArgs, args);
		args['limit'] = 100;
		apiService.getWithParams(apiUrl.GET_ALL_EVENT, args, function(data,
				status) {
			setTimeout(function(){
				$scope.allToolEvents = data;
				_this.loading = false;
				if(!$scope.$$phase)$scope.$apply();
			},10);			
		});
	}

	/*
	 * Get patterns of actions that commonly occur consecutively.
	 * 
	 */

	this.getFrequentEventPattern = function(args) {

		apiService.getWithParams(apiUrl.GET_FREQUENT_EVENT_PATTERN, args,
				function(data, status) {

					for (var i = 0; i < data.length; i++) {
						data[i].eIds = data[i].pattern.replace(/#/g, '').split(
								'_');
						data[i].eNames = data[i].pattern_class.split('_');
					}
					$scope.eventPatternData = data;
					
				});


	}

	this.toogleEventPattern = function(index, e) {
		var el = e.replace(':', '_');
		$("#pattern" + index + "_" + el).find('.elements').toggle();
		if ($("#pattern" + index + "_" + el).find('.elements').is(":visible")) {
			_this.loadEventPatternElements(index, el);
		}
		return false;
	}

	/*
	 * Get Event details
	 */

	this.loadEventPatternElements = function(index, id) {
		var args = [];
		args['rid'] = id.replace('_', ':');

		var html;

		var element = $("#pattern" + index + "_" + id).find('.elements');
		apiService.getWithParams(apiUrl.GET_EVENT_DETAIL, args, function(data,
				status) {

			html = "<table class='table table-bordered'>";
			for ( var key in data) {
				html += "<tr><td>" + key + "</td><td style='word-break: break-all;'>  " + data[key]
						+ "</td></tr>";
			}
			html += "</table>";
			element.html(html);

		});

	}
	
	this.init();

}

/**
 * 
 * Pass all functions into module
 */
angular.module('cie').controller('ToolEventCtrl', ToolEventCtrl);