/**
 * Event Search controller
 * 
 */
function EventSearchCtrl($scope, apiService, apiUrl, $anchorScroll, $location,
		$localStorage, $modal, notify, $http, userDataService) {

	var _this = this;

	this.searchArgs = $localStorage.searchFilterArgs || {};

	this.selected = {};

	this.username = userDataService.getUserName();

	this.filtername = "";

	this.totalFilterCount = 0;
	
	/*
	 * Initialize 
	 */
	
	this.init = function() {

		_this.selected['sessionId'] = (_this.searchArgs['sessionId'] != undefined ? _this.searchArgs['sessionId']
				: '');
		_this.selected['serverId'] = (_this.searchArgs['serverId'] != undefined ? _this.searchArgs['serverId']
				: '');
		_this.selected['source'] = (_this.searchArgs['source'] != undefined ? _this.searchArgs['source']
				: '');
		_this.selected['domainId'] = (_this.searchArgs['domainId'] != undefined ? _this.searchArgs['domainId']
				: '');

		_this.fromDate = (_this.searchArgs['fromDate'] != undefined ? _this.searchArgs['fromDate']
				: new Date());

		_this.toDate = (_this.searchArgs['toDate'] != undefined ? _this.searchArgs['toDate']
				: new Date());

		_this.getSources();
		_this.getDomains();
		_this.getServers();
		_this.getSessions();
		_this.getSavedFilters({});

	}
	

	/*
	 * To clear search filter
	 */

	this.eventSearchClear = function() {

		_this.searchArgs = {};
		_this.init();
		$scope.$emit('populateSearch');
	};

	/*
	 * To save search filter
	 */

	this.saveSearchFilter = function(args) {

		var args = {};

		args['source'] = _this.selected['source'] || "all";
		args['domainId'] = _this.selected['domainId'] || "all";
		args['serverId'] = _this.selected['serverId'] || "all";
		args['sessionId'] = _this.selected['sessionId'] || "all";
		args['fromDate'] = new Date(_this.fromDate).getTime() || "all";
		args['toDate'] = new Date(_this.toDate).getTime() || "all";
		args['uName'] = _this.username;
		args['filtername'] = _this.filtername || "filtername"
				+ (_this.totalFilterCount + 1);

		apiService.post(apiUrl.SAVE_SEARCH_FILTER, args,
				function(data, status) {
					if (data.status == "Failed") {
						notify({
							message : 'Error :- ' + data.message,
							classes : 'alert-danger',
							templateUrl : 'views/common/notify.html'
						});

					} else {
						notify({
							message : 'Success :- ' + data.message,
							classes : 'alert-success',
							templateUrl : 'views/common/notify.html'
						});
						_this.getSavedFilters({});
					}
					_this.filtername = "";

				});

	}

	/*
	 * To get saved search filter list
	 */

	this.getSavedFilters = function(args) {
		args['uName'] = _this.username;
		args['limit'] = args['limit'] || 2;
		apiService.getWithParams(apiUrl.GET_SAVED_FILTERS, args, function(data,
				status) {
			_this.savedFilterList = data.result;
			_this.totalFilterCount = data.totalFilterCount;
		});

	}


	/*
	 * Get all Session Ids
	 */

	this.getSessions = function() {
		var args = {};
		args['source'] = _this.selected['source'];
		args['domainId'] = _this.selected['domainId'];
		args['serverId'] = _this.selected['serverId'];
		apiService
				.getWithParams(
						apiUrl.GET_SESSIONS,
						args,
						function(data, status) {
							_this.eventSessionList = data.names;

							if (_this.selected['sessionId'] != ""
									&& data.names
											.indexOf(_this.selected['sessionId']) == -1) {
								_this.searchArgs['sessionId'] = _this.selected['sessionId'] = "";
								$scope.$emit('populateSearch');
							}

						});
	}

	this.hasSessionChanged = function() {

		_this.searchArgs['sessionId'] = _this.selected['sessionId'];
		$scope.$emit('populateSearch');

	}

	/*
	 * Get all Server Ids
	 */

	this.getServers = function() {
		var args = {};
		args['source'] = _this.selected['source'];
		apiService.getWithParams(apiUrl.GET_SERVERS, args, function(data,
				status) {
			_this.eventServerList = data.names;
			if (_this.selected['serverId'] != ""
					&& data.names.indexOf(_this.selected['serverId']) == -1) {
				_this.searchArgs['serverId'] = _this.selected['serverId'] = "";
				$scope.$emit('populateSearch');
			}
		});
	}

	this.hasServerChanged = function() {

		_this.getDomains();
		_this.getSessions();
		_this.searchArgs['serverId'] = _this.selected['serverId'];
		$scope.$emit('populateSearch');

	}

	/*
	 * Get all Domain/User Ids
	 */

	this.getDomains = function() {
		var args = {};
		args['source'] = _this.selected['source'];
		args['serverId'] = _this.selected['serverId'];
		apiService.getWithParams(apiUrl.GET_DOMAINS, args, function(data,
				status) {
			_this.eventDomainList = data.names;
			if (_this.selected['domainId'] != ""
					&& data.names.indexOf(_this.selected['domainId']) == -1) {
				_this.searchArgs['domainId'] = _this.selected['domainId'] = "";
				$scope.$emit('populateSearch');
			}

		});
	}

	this.hasDomainChanged = function() {

		_this.getSessions();
		_this.searchArgs['domainId'] = _this.selected['domainId'];
		$scope.$emit('populateSearch');

	}

	/*
	 * Get all Domain Ids
	 */

	this.getSources = function() {

		apiService.getWithParams(apiUrl.GET_SOURCES, {},
				function(data, status) {
					_this.eventSourceList = data.names;
				});
	}

	this.hasSourceChanged = function() {

		_this.getServers();
		_this.getDomains();
		_this.getSessions();
		_this.searchArgs['source'] = _this.selected['source'];
		$scope.$emit('populateSearch');
	}

	
	this.hasFromDateChanged = function() {

		if ((_this.searchArgs['fromDate'] != undefined)
				|| _this.searchArgs['fromDate'] != new Date(_this.fromDate)
						.getTime()) {
			_this.searchArgs['fromDate'] = new Date(_this.fromDate).getTime();
			$scope.$emit('populateSearch');
		}

	}

	this.hasToDateChanged = function() {

		if ((_this.searchArgs['toDate'] != undefined)
				|| _this.searchArgs['toDate'] != new Date(_this.toDate)
						.getTime()) {
			_this.searchArgs['toDate'] = new Date(_this.toDate).getTime();
			$scope.$emit('populateSearch');
		}

	}

	this.init();

}

/**
 * 
 * Pass all functions into module
 */
angular.module('cie').controller('EventSearchCtrl', EventSearchCtrl)
