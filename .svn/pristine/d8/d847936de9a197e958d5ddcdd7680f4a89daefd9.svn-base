/**
 * MainCtrl - controller Contains severals global data used in diferent view
 * 
 */
function MainCtrl(conf, apiUrl, apiService, $scope, $http, $anchorScroll,
		$location, $localStorage, $modal, $compile) {

	var _this = this;

	_this.minRange = 1;
	_this.maxRange = 10;

	this.patternData = [ {
		"pattern" : "#12:4_#21:3",
		"pattern_class" : "Action_KeyB",
		"association_count" : 6
	}, {
		"pattern" : "#12:5_#26:1_#36:2",
		"pattern_class" : "Action_View_Window",
		"association_count" : 2
	}, {
		"pattern" : "#12:5_#26:1_#36:2_#25:2_#32:5_#19:9_#73:7",
		"pattern_class" : "Action_View_Window_View_KeyB_Config_Environment",
		"association_count" : 1
	} ];

	this.getFrequentEventPattern = function(args) {

		apiService.getWithParams(apiUrl.GET_FREQUENT_EVENT_PATTERN, args,
				function(data, status) {

					for (var i = 0; i < data.length; i++) {
						data[i].eIds = data[i].pattern.replace(/#/g, '').split(
								'_');
						data[i].eNames = data[i].pattern_class.split('_');
					}
					_this.patternData = data;
				});

	}
	this.tooglePattern = function(index, e, event) {
		var el = e.replace(':', '_');
		$("#pattern" + index + "" + el).find('.elements').toggle();
		if ($("#pattern" + index + "" + el).find('.elements').is(":visible")) {
			_this.loadPatternElements(index, el);
		}
		return false;
	}

	this.loadPatternElements = function(index, id) {
		var args = [];
		args['rid'] = id.replace('_', ':');

		var html;

		var element = $("#pattern" + index + "" + id).find('.elements');
		apiService
				.getWithParams(
						apiUrl.GET_EVENT_DETAIL,
						args,
						function(data, status) {
							
							html = "<table class='table table-bordered'>";
							for ( var key in data) {
								html += "<tr><td>"
										+ key
										+ "</td><td>  "
										+ data[key] + "</td></tr>";
							}
							html += "</table>";
							element.html(html);

						});

	}

	this.getFrequentEventPattern('');

	angular.element(document).ready(
			function() {

				var track = function(data) {
					console.log(data);
					_this.minRange = data.fromNumber;
					_this.maxRange = data.toNumber;
					var $scopeRe = angular
							.element($("#patternRangeFilterData")).scope();
					$compile($scopeRe);
					$scopeRe.$apply();
				};
				$("#patternRange").ionRangeSlider({
					type : "double",
					min : 1,
					max : 10,
					from : 1,
					to : 10,
					step : 1,
					onStart : track,
					onChange : track,
					onFinish : track,
					onUpdate : track
				});
			});

}

angular.module('cie').controller('MainCtrl', MainCtrl);

angular.module('cie').filter("removeClusterInfo", function() {
	return function(data) {
		return data.replace(':', '_');
	};
});

angular.module('cie').filter(
		"eventIcon",
		function() {
			return function(name) {
				var icon = (name.match('KeyBoard')) ? "fa-keyboard-o" 
						: (name.match('Action')) ? "fa-cogs"
						: (name.match('View')) ? "fa-eye" 
						: (name.match('Error')) ? "fa-times-circle" 
						: (name.match('Config')) ? "fa-wrench" 
						: (name.match('Window')) ? "fa-desktop" 
						: (name.match('Environment')) ? "fa-cubes" 
						: (name.match('Domain')) ? "fa-globe" 
						: (name.match('Field')) ? "fa-tags" 
						: "fa-square";
				var event = name.split(';');

				return "<i class='fa " + icon + "'></i> " + event[1];

			};
		});
