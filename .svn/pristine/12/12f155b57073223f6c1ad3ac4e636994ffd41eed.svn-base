/**
 * Dashboard Controller
 */

function DashboardCtrl(conf, apiUrl, apiService, $scope, $http, $anchorScroll,
		$location, $localStorage, $modal, $compile) {

	var _this = this;

	this.minRange = 1;
	
	this.maxRange = 10;
	
	this.eventTableLoading = false;

	this.exceptionPatternData = [];

	this.init = function() {

		var args = ($localStorage.searchFilterArgs != undefined) ? $localStorage.searchFilterArgs
				: {};

		_this.getOverAllSummary();
		_this.getAllEvent(args);
		_this.getFrequentEventPattern(args);
		_this.getExceptionCount(args);

	}

	/*
	 * Search filter (in progress)
	 */
	$scope.$on('populateSearch', function(event, args) {

	    $localStorage.searchFilterArgs = args;
		_this.getAllEvent(args);
		_this.getFrequentEventPattern(args);
		_this.getExceptionCount(args);

	});

	/*
	 * Returns the count of event
	 */

	this.getCount = function(key) {
		return (_this.summaryData == null || _this.summaryData[key] == undefined) ? 0
				: _this.summaryData[key].count;
	}

	/*
	 * Get overall summary of Events(count)
	 */

	this.getOverAllSummary = function() {
		apiService.get(apiUrl.GET_OVERALL_SUMMMARY, function(data, status) {
			_this.summaryData = data;
		});
	}

	/*
	 * Get all the events
	 */

	this.getAllEvent = function(searchArgs) {
		_this.eventTableLoading = true;
		var args = {};
		angular.copy(searchArgs, args);
		args['limit'] = 100;
		apiService.getWithParams(apiUrl.GET_ALL_EVENT, args, function(data,
				status) {
			setTimeout(function() {
				$scope.allToolEvents = data;
				_this.eventTableLoading = false;
				if (!$scope.$$phase)
					$scope.$apply();
			}, 10);
		});
	}

	/*
	 * Get patterns of actions that commonly occur consecutively.
	 * 
	 */

	this.getFrequentEventPattern = function(args) {

		apiService.getWithParams(apiUrl.GET_FREQUENT_EVENT_PATTERN, args,
				function(data, status) {

					for (var i = 0; i < data.length; i++) {
						data[i].eIds = data[i].pattern.replace(/#/g, '').split(
								'_');
						data[i].eNames = data[i].pattern_class.split('_');
					}
					$scope.eventPatternData = data;

				});

	}

	this.toogleEventPattern = function(index, e) {
		var el = e.replace(':', '_');
		$("#pattern" + index + "_" + el).find('.elements').toggle();
		if ($("#pattern" + index + "_" + el).find('.elements').is(":visible")) {
			_this.loadEventPatternElements(index, el);
		}
		return false;
	}

	/*
	 * Get Event details
	 */

	this.loadEventPatternElements = function(index, id) {
		var args = [];
		args['rid'] = id.replace('_', ':');

		var html;

		var element = $("#pattern" + index + "_" + id).find('.elements');
		apiService.getWithParams(apiUrl.GET_EVENT_DETAIL, args, function(data,
				status) {

			html = "<table class='table table-bordered'>";
			for ( var key in data) {
				html += "<tr><td>" + key
						+ "</td><td style='word-break: break-all;'>  "
						+ data[key] + "</td></tr>";
			}
			html += "</table>";
			element.html(html);

		});

	}

	/*
	 * Get common patterns and actions leading up to the exception
	 */

	this.getFrequentExceptionPattern = function(index, exception) {
		var args = {};
		if ($localStorage.searchFilterArgs != undefined) {
			angular.copy($localStorage.searchFilterArgs, args);
		}
		args['errorTracechecksum'] = exception.checksum;
		apiService.getWithParams(apiUrl.GET_FREQUENT_EXCEPTION_PATTERN, args,
				function(data, status) {

					for (var i = 0; i < data.length; i++) {
						data[i].eIds = data[i].pattern.replace(/#/g, '').split(
								'_');
						data[i].eNames = data[i].pattern_class.split('_');
					}

					$("#excep" + index).find('.excepElements').toggle();
					if ($("#excep" + index).find('.excepElements').is(
							":visible")) {
						_this.exceptionPatternData[index] = data;

					}
				});
	}

	/*
	 * Get common exception patterns along with: Counts on how frequently they
	 * occur
	 */

	this.getExceptionCount = function(args) {
		apiService.getWithParams(apiUrl.GET_EXCEPTION_COUNT, args, function(
				data, status) {
			var regex = /\(([A-Z][^:\)]+:\d+)\)/g;

			for (var i = 0; i < data.length; i++) {
				data[i].sTrace = [];
				if (data[i].trace.match('\\[') != null) {
					data[i].sTrace = angular.fromJson(data[i].trace);
				} else {
					data[i].sTrace.push(data[i].trace);
				}
				var match = data[i].trace.match(regex);
				if (match != null) {
					data[i].message += "[" + match.join(", ") + "]";
				}

			}
			$scope.exceptionData = data;

		});

	}
	
	/*
	 * Range Filter
	 */
	angular.element(document).ready(
			function() {

				var track = function(data) {
					console.log(data);
					_this.minRange = data.fromNumber;
					_this.maxRange = data.toNumber;
					var $scopeRe = angular
							.element($("#patternRangeFilterData")).scope();
					$compile($scopeRe);
					$scopeRe.$apply();
				};
				$("#patternRange").ionRangeSlider({
					type : "double",
					min : 1,
					max : 10,
					from : 1,
					to : 10,
					step : 1,
					onStart : track,
					onChange : track,
					onFinish : track,
					onUpdate : track
				});
			});
	
	
	this.init();

}

/**
 * 
 * Pass all functions into module
 */
angular.module('cie').controller('DashboardCtrl', DashboardCtrl);